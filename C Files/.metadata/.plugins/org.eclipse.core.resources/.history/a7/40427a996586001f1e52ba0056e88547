#include<avr/io.h>
#include<util/delay.h>
#include "std_types.h"
#include "led.h"
#include "lcd.h"
#include "buzzer.h"
#include "adc.h"
#include "lm35_sensor.h"
#include "pwm.h"
#include "motor.h"
#include "flame_sensor.h"

int main(void){
	//Initializations
	LEDS_init();
	LCD_init();
	Buzzer_init();
	ADC_init();
	DCMotor_Init();
	FlameSensor_init();
	//-------------------------------------------------------------------
	//Variables
	uint8 temperature;
	uint16 light_intensity;
	uint8 flame_sensor_value;
	uint8 flame_sensor_flag = 0;
	//-------------------------------------------------------------------
	//LCD Layout
	LCD_displayStringRowColumn(0,4, "FAN is");
	LCD_displayStringRowColumn(1,0, "Temp=");
	LCD_displayStringRowColumn(1,8,"LDR=");
	LCD_displayStringRowColumn(1,16,"%");
	//-------------------------------------------------------------------
	//Initialization objects of Structure LED_ID
	LED_ID RED_LED = {RED_LED_PORT_ID, RED_LED_PIN_ID};
	LED_ID GREEN_LED = {GREEN_LED_PORT_ID, GREEN_LED_PIN_ID};
	LED_ID BLUE_LED = {BLUE_LED_PORT_ID, BLUE_LED_PIN_ID};
	//-------------------------------------------------------------------

	while(1){

		//Temperature Sensor LM35
		temperature = LM35_getTemperature();
		LCD_moveCursor(1,5);
		if(temperature >= 100){
			LCD_intgerToString(temperature);
		}else{
			LCD_intgerToString(temperature);
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
		}
		//-------------------------------
		//LDR
		light_intensity = LDR_getlightIntensity();
		LCD_moveCursor(1,12);
		if(light_intensity >= 100){
			LCD_intgerToString(light_intensity);
		}else{
			LCD_intgerToString(light_intensity);
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' '); //that space to make the cursor in the correct place when the number turns from 3 digits to 2 digits
		}
		//------------------------------
		//Relation between light intensity and leds
		if(light_intensity < 15){

			LED_on(RED_LED);
			LED_on(GREEN_LED);
			LED_on(BLUE_LED);

		}else if (light_intensity >=16 && light_intensity <= 50){

			LED_on(RED_LED);
			LED_on(GREEN_LED);
			LED_off(BLUE_LED);

		}else if(light_intensity >=51 && light_intensity <=70){

			LED_on(RED_LED);
			LED_off(GREEN_LED);
			LED_off(BLUE_LED);

		}else if(light_intensity > 70){

			LED_off(RED_LED);
			LED_off(GREEN_LED);
			LED_off(BLUE_LED);
		}
		//----------------------------------------
		//Relation between temperature sensor and motor
		if(temperature >= 40){
			//notice that there's a space after On, its purpose is to remove the second f in the word off
			LCD_displayStringRowColumn(0,11,"On ");
			DCMotor_Rotate(CW,MOTOR_PWM_100_PERCENT);

		}else if(temperature >= 35 && temperature < 40){

			LCD_displayStringRowColumn(0,11,"On ");
			DCMotor_Rotate(CW,MOTOR_PWM_75_PERCENT);

		}else if (temperature >= 30 && temperature < 35){

			LCD_displayStringRowColumn(0,11,"On ");
			DCMotor_Rotate(CW,MOTOR_PWM_50_PERCENT);

		}else if (temperature >= 25 && temperature < 30){

			LCD_displayStringRowColumn(0,11,"On ");
			DCMotor_Rotate(CW,MOTOR_PWM_25_PERCENT);

		}else if (temperature < 25){

			LCD_displayStringRowColumn(0,11,"Off");
			DCMotor_Rotate(Stop,MOTOR_PWM_0_PERCENT);

		}
		//-------------------------------------------
		//Relation between flame sensor and alarm and lcd
		flame_sensor_value = FlameSensor_getValue();
		if( flame_sensor_value == LOGIC_HIGH){
			Buzzer_on();
			LCD_clearScreen();
			LCD_displayString("Critical Alert!!");
			while(FlameSensor_getValue() == LOGIC_HIGH);
			flame_sensor_flag = 1;
		}else{

			if(flame_sensor_flag == 1){
			Buzzer_off();
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,4, "FAN is");
			LCD_displayStringRowColumn(1,0, "Temp=");
			LCD_displayStringRowColumn(1,8,"LDR=");
			LCD_displayStringRowColumn(1,15,"%");
			flame_sensor_flag = 0;
			}
		}

	}
}

